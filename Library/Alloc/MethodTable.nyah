/// # MethodTableRef
///
/// Generally speaking,
/// each type will correspond to a MethodTableRef.
///
/// The tables are always generated by the compiler,
/// which is immutable.
public struct MethodTableRef {
    /// ## pointer
    ///
    /// This pointer points to the MethodTable.
    pointer: Pointer,
}

impl MethodTable {
    /// ## offset
    ///
    /// Offset from the MethodTable pointer,
    /// the offset is `index * sizeOf<int>`.
    public func offset(&self, index: int): Pointer {
        self.pointer.offset<int>(index)
    }

    /// ## name
    ///
    /// Get the name of the type.
    public func name(&self): StringRef {
        <StringRef>(self.pointer)
    }

    /// ## count
    ///
    /// Get the method count of the type.
    public func count(&self): usize {
        <usize>(self.offset(1))
    }

    /// ## get
    ///
    /// Get a function from the table by the index of the function.
    public func get<FuncType>(&self, index: int): FuncType {
        <FuncType>(self.offset(index * 2 + 2))
    }

    /// ## getFuncName
    ///
    /// Get the name of a function by the index of the function.
    public func getFuncName(&self, index: int): StringRef {
        <StringRef>(self.offset(index * 2 + 3))
    }
}
