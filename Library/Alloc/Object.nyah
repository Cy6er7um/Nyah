use core.traits.inner.Inner;

use ~.Collector.CollectorTag;
use ~.MethodTable.MethodTableRef;

/// # Object<DataType>
///
/// The instance model of each class is actually `Object<DataType>`.
///
/// `DataType` of the class types is always implemented by the compiler.
#[TypeTag("ObjectModel")]
public struct Object<DataType> {
    /// ## methodTableRef
    ///
    /// The method table is always generated by the compiler.
    ///
    /// We can use it to implement operations such as reflection.
    methodTableRef: MethodTableRef,
    /// ## collectorTag
    ///
    /// This tag marks the garbage collection status of an object.
    collectorTag: CollectorTag,
    /// ## data
    ///
    /// The data fields of an object.
    data: DataType,
}

impl<DataType> Inner for Object<DataType> {
    /// ## _innerRef
    ///
    /// Get the reference of the inner data.
    ///
    /// The fields of `self.data` will be exposed.
    func _innerRef(&self): &DataType {
        &self.data
    }
}
